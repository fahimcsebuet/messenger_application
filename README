-- Techniques for multiplexing
- Client: POSIX Thread
- Server: Select

-- Important Notes for test:
1. Outputs are generated in server/output and client/output
2. There are some sample files in the above mentioned folders
3. user_info_file in server/output - There are some sample users, e.g. user1 with password1, user2 with password2, user7 with password7 etc.
4. configuration_file in client/output - server is assumed to be in linprog1 and 5100 port. It can be changed manually to adjust with any server
5. configuration_file in server/output - It has the port number as 5100. It can be changed and if it is 0, server will bind to any port

-- Features:

- Server -
1. Run server like this: ./messenger_server user_info_file configuration_file
2. Server will show the Fully Qualified Domain Name and Port, and wait for Receiving connections
3. SIGINT is handled in the server. It will save the user_info_file with the latest update before closing

- Client -
1. login:
1.1. Press 'l'
1.2. Input Username
1.3. Input Password
1.4. Logged in if password matches, otherwise try again by pressing 'l' again
1.4. Prompt will show number of online friends and there location
1.5. Notify the online friends about the logging in of the user
1.6. Share location with the online friends
1.7. Get notified about the location of the online friends
2. register:
2.1. Press 'r'
2.2. Input Username
2.3. Input Password
2.4. Registered if username is available
2.5. Logged in automatically after registration
3. logout:
3.1. Type 'logout'
3.2. Logged in friends will be notified about the logging off of the user
3.3. All the sockets will be closed if necessary
4. send invitation:
4.1. Type 'i potential_friend [message]' - here message is optional
5. accept invitation:
5.1. Type 'ia potential_friend [message]' - here message is optional
6. deny invitation:
6.1. Type 'id potential_friend [message]' - here message is optional
7. Send message:
7.1. Type 'm friend_username message'
8. Exit:
8.1. Type 'exit'
8.2. Exiting will also log out the user
9. SIGINT is handled in the server. It will also close the pending sockets

